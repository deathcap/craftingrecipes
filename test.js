// Generated by CoffeeScript 1.6.3
(function() {
  var AmorphousRecipe, CraftingThesaurus, Inventory, ItemPile, PositionalRecipe, Recipe, craftingGrid, test, _ref;

  test = require('tape');

  _ref = require('./'), Recipe = _ref.Recipe, AmorphousRecipe = _ref.AmorphousRecipe, PositionalRecipe = _ref.PositionalRecipe, CraftingThesaurus = _ref.CraftingThesaurus;

  Inventory = require('inventory');

  ItemPile = require('itempile');

  craftingGrid = function(names) {
    var i, input, _i, _ref1;
    input = new Inventory(4);
    for (i = _i = 0, _ref1 = names.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      input.set(i, new ItemPile(names[i], 1));
    }
    return input;
  };

  test('simple recipe match', function(t) {
    var r;
    r = new AmorphousRecipe(['log'], 'plank');
    t.equals(r.matches(craftingGrid(['log'])), true);
    t.equals(r.matches(craftingGrid([void 0, 'log'])), true);
    t.equals(r.matches(craftingGrid([void 0, void 0, 'log'])), true);
    t.equals(r.matches(craftingGrid([void 0, void 0, void 0, 'log'])), true);
    return t.end();
  });

  test('double ingredients', function(t) {
    var r;
    r = new AmorphousRecipe(['plank', 'plank'], 'stick');
    t.equals(r.matches(craftingGrid(['plank'])), false);
    t.equals(r.matches(craftingGrid(['plank', 'plank'])), true);
    t.equals(r.matches(craftingGrid(['plank', 'plank', 'plank'])), true);
    t.equals(r.matches(craftingGrid([void 0, 'plank', 'plank'])), true);
    t.equals(r.matches(craftingGrid([void 0, void 0, 'plank', 'plank'])), true);
    return t.end();
  });

  test('thesaurus', function(t) {
    var r;
    r = new AmorphousRecipe(['log'], 'plank');
    CraftingThesaurus.registerName('log', new ItemPile('logOak'));
    CraftingThesaurus.registerName('log', new ItemPile('logBirch'));
    t.equals(r.matches(craftingGrid(['log'])), true);
    t.equals(r.matches(craftingGrid(['logOak'])), true);
    t.equals(r.matches(craftingGrid(['logBirch'])), true);
    t.equals(r.matches(craftingGrid(['logWhatever'])), false);
    return t.end();
  });

}).call(this);
